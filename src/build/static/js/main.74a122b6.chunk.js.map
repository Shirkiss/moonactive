{"version":3,"sources":["components/add-delayed-message-form.js","components/messages-list.js","components/delete-list.js","App.js","serviceWorker.js","index.js"],"names":["AddDelayedMessageForm","useState","messageText","setMessageTest","delay","setDelay","addDelayedMessage","a","fetch","method","body","JSON","stringify","message","parseInt","headers","result","console","log","json","className","rows","cols","value","onChange","event","target","onClick","MessagesList","messages","map","key","DeleteList","deleteAllMessages","App","messagesList","setMessagesList","useEffect","fetchData","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gRAwCeA,G,MAtCe,WAAO,IAAD,EAEMC,mBAAS,IAFf,mBAEzBC,EAFyB,KAEZC,EAFY,OAGNF,mBAAS,IAHH,mBAGzBG,EAHyB,KAGlBC,EAHkB,KAK1BC,EAAiB,uCAAG,4BAAAC,EAAA,sEACDC,MAAM,kBAAmB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,QAASX,EAAaE,MAAOU,SAASV,EAAO,MACnEW,QAAS,CACL,eAAgB,sBALF,OAChBC,EADgB,OAQtBC,QAAQC,IAAIF,EAAOG,QACnBhB,EAAe,IACfE,EAAS,IAVa,2CAAH,qDAavB,OACI,yBAAKe,UAAU,aACX,mDACA,8BACI,yBAAKA,UAAU,cACX,2CACA,8BAAUC,KAAK,IAAIC,KAAK,KAAKF,UAAU,eAAeG,MAAOrB,EACnDsB,SAAU,SAACC,GAAD,OAAWtB,EAAesB,EAAMC,OAAOH,WAE/D,yBAAKH,UAAU,cACX,wCACA,2BAAOA,UAAU,eAAeG,MAAOnB,EAAOoB,SAAU,SAACC,GAAD,OAAWpB,EAASoB,EAAMC,OAAOH,WAE7F,4BAAQH,UAAU,kBAAkBO,QAAS,kBAAMrB,MAAnD,mBCpBDsB,EAXM,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACjB,oCACI,yCACCA,EAASC,KAAI,SAACjB,EAASkB,GAAV,OACV,yBAAKX,UAAU,UAAUW,IAAKA,GAC1B,4BAAKlB,SCeNmB,EApBI,WAGf,IAAMC,EAAiB,uCAAG,sBAAA1B,EAAA,sEAChBC,MAAM,aAAc,CACtBC,OAAQ,MACRM,QAAS,CACL,eAAgB,sBAJF,2CAAH,qDASvB,OACI,yBAAKK,UAAU,aACX,4BAAQA,UAAU,kBAAkBO,QAAS,kBAAMM,MAAnD,iBCgBGC,MAzBf,WAAgB,IAAD,EAC6BjC,mBAAS,IADtC,mBACJkC,EADI,KACUC,EADV,KAcX,OAXAC,qBAAU,YACS,uCAAG,8BAAA9B,EAAA,sEACOC,MAAM,mBADb,cACRQ,EADQ,gBAEKA,EAAOG,OAFZ,OAERT,EAFQ,OAGdO,QAAQC,IAAIR,EAAKmB,UACjBO,EAAgB1B,EAAKmB,UAJP,2CAAH,qDAMfS,MAKA,yBAAKlB,UAAU,OAEX,uBAAGmB,KAAK,yCAAyCb,OAAO,UAAxD,0BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcG,SAAUM,EAAcC,gBAAiBA,IACvD,kBAAC,EAAD,QCfQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAM5C,a","file":"static/js/main.74a122b6.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst AddDelayedMessageForm = () => {\n\n    const [messageText, setMessageTest] = useState('');\n    const [delay, setDelay] = useState('');\n\n    const addDelayedMessage = async () => {\n        const result = await fetch(`/testEchoAtTime`, {\n            method: 'post',\n            body: JSON.stringify({message: messageText, delay: parseInt(delay, 10)}),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        console.log(result.json());\n        setMessageTest('');\n        setDelay('');\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>Add Delayed Message</h2>\n            <form>\n                <div className=\"form-group\">\n                    <label>Message:</label>\n                    <textarea rows=\"4\" cols=\"50\" className=\"form-control\" value={messageText}\n                              onChange={(event) => setMessageTest(event.target.value)}/>\n                </div>\n                <div className=\"form-group\">\n                    <label>Delay</label>\n                    <input className=\"form-control\" value={delay} onChange={(event) => setDelay(event.target.value)}/>\n                </div>\n                <button className=\"btn btn-primary\" onClick={() => addDelayedMessage()}>Add Message</button>\n            </form>\n        </div>\n    );\n\n};\n\nexport default AddDelayedMessageForm;\n","import React from 'react';\n\nconst MessagesList = ({messages}) => (\n    <>\n        <h3>Messages:</h3>\n        {messages.map((message, key) => (\n            <div className=\"message\" key={key}>\n                <h4>{message}</h4>\n            </div>\n        ))}\n    </>\n);\n\nexport default MessagesList;","import React from 'react';\n\nconst DeleteList = () => {\n\n\n    const deleteAllMessages = async () => {\n        await fetch(`/removeAll`, {\n            method: 'get',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    };\n\n    return (\n        <div className=\"container\">\n            <button className=\"btn btn-primary\" onClick={() => deleteAllMessages()}>Delete List</button>\n        </div>\n    );\n\n};\n\nexport default DeleteList;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport AddDelayedMessageForm from \"./components/add-delayed-message-form\";\nimport MessagesList from \"./components/messages-list\";\nimport DeleteList from \"./components/delete-list\";\n\n\nfunction App() {\n    const [messagesList, setMessagesList] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(`/getAllMessages`);\n            const body = await result.json();\n            console.log(body.messages);\n            setMessagesList(body.messages);\n        };\n        fetchData();\n    });\n\n\n    return (\n        <div className=\"App\">\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href=\"https://github.com/Shirkiss/moonactive\" target=\"_blank\">Link to GitHub project</a>\n            <AddDelayedMessageForm/>\n            <MessagesList messages={messagesList} setMessagesList={setMessagesList}/>\n            <DeleteList/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}